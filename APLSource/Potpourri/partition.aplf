 partition←{
     ⍝ ⍵ ←→ rank-1 or greater APL array
     ⍝ ⍺ ←→ representation of a specification for extracting sub-arrays,
     ⍝      consisting of three parts:
     ⍝      1. a non-empty positive integer vector with up to ≢⍴array elements,
     ⍝         specifying the shape of sub-arrays.
     ⍝      2. optionally an integer vector of the same shape as the first element,
     ⍝         specifying a movement size for the partitioning.
     ⍝         If not supplied or empty, it is assumed to be (≢1⊃⍺)⍴1.
     ⍝      3. optionally an integer vector of ≢⍴⍵ elements, specifying the coordinates
     ⍝         for the first partition.
     ⍝         If not supplied or empty, it is assumed to be (≢⍴⍵)⍴1.
     ⍝      If ⍺ is a simple depth 0 or 1 array, its enclosure is used as the shape specification.
     ⍝ returns a vector of sub-arrays of ⍵, each of the shape described in ⍺;
     ⍝ if no matching sub-arrays exist, returns an empty vector.

     ⍝ We first extract the the specification components from ⍺ as shape, movement and first
     ⍝ as specified in the function description using standard values if none are supplied.
     spec←{(0<≢¨⍵)/⍵},⊆⍺
     movement_default←(≢1⊃spec)⍴1
     first_default←(≢⍴⍵)⍴1
     (shape movement first)←⌽¯3↑first_default movement_default,⌽spec

     ⍝ We drop everything before the coordinates of the first partition in the array used
     ⍝ for the further partition steps.
     array←(¯1+first)↓⍵
     ⍝ shape and movement might be of lower rank than array. We prepend 1's to raise their
     ⍝ ranks to that of array.
     (shape movement)←{⌽1+(≢⍴array)↑¯1+⌽⍵}¨shape movement

     ⍝ If any element of shape is larger than the corresponding element of the shape of array,
     ⍝ then no matching sub-array exist and we return an empty vector with a suitable prototype.
     ∨/shape>⍴array:0⍴⊂shape⍴array

     ⍝ We use stencil with shape applied to array to get a basis for our partition. This basic
     ⍝ partition may contain overhang elements and does not take into account the movement size.
     ⍝ We signify the overhang elements by dropping their fill elements, so that their shape will
     ⍝ not fit the content of the variable shape. Using this we can extract the indices of the
     ⍝ non-overhanging elements.
     full_partition_with_overhang←({⊂⍺↓⍵}⌺shape)array
     indices_no_overhang←(⍸(⊂shape)≡¨⍴¨full_partition_with_overhang)

     ⍝ Finally we determine the indices to keep for our partition by considering all non-overhanging
     ⍝ indices that respect the movement size, i.e., whose difference to the index of the starting partition
     ⍝ is an integer multiple of the movement vector.
     index_start←⊃⌊/indices_no_overhang
     indices_keep←(∧/¨0=(⊂movement)|(indices_no_overhang-⊂index_start))/indices_no_overhang
     ⊃¨indices_keep⌷¨⊂full_partition_with_overhang
 }
