 vin←{
     ⍝ ⍵ ←→ character vector
     ⍝ returns a value that is dependent on the character vector right argument:
     ⍝ 1. If 16=≢⍵, takes ⍵ as a VIN missing the check-digit in position 9 and
     ⍝    returns the complete 17-digit VIN including the check-digit
     ⍝ 2. If 17=≢⍵, computes the check-digit and returns 1 if it matches the
     ⍝    character in position 9 and 0 otherwise
     ⍝ 3. If ≢⍵ is neither 16 or 17 returns ¯1
     ⍝ 4. If ⍵ contains any characters not allowed in a VIN, returns ¯1.

     ⍝ First we check if we are in case 3 or 4 and if so, return ¯1 without further
     ⍝ computation
     forbidden←'IOQ'
     allowed←⎕D,⎕A~forbidden
     ~(≢⍵)∊16 17:¯1
     ~∧/⍵∊allowed:¯1

     first_part←8↑⍵
     second_part←¯8↑⍵

     ⍝ If ⍵ has length 17 we are in case 2 and can call this function recursively with
     ⍝ the character vector of length 16 leaving out the check-digit in position 9 to check
     ⍝ whether this function call returns a character vector equal to ⍵
     17=≢⍵: ⍵≡∇ first_part,second_part

     ⍝ Since we have already handled cases 2 to 4, we are in case 1 now, i.e. ⍵ is a valid VIN
     ⍝ missing the check digit in position 9. Then we calculate the check-digit by multiplying
     ⍝ the numeric counterparts of the letters in the VIN by their positional weights, summing
     ⍝ the products and taking the 11 modulo of the sum, representing 10 by 'X'.
     ⍝ We then return a full VIN by insering the check-digit in position 9.
     numerical_counterparts←((¯1+⍳10),(⍳8),(⍳5),7,9,(1+⍳8))
     weights←8 7 6 5 4 3 2 10 9 8 7 6 5 4 3 2
     check_digit←((⎕D,'X')[1+11|+/numerical_counterparts[allowed⍳⍵]×weights])
     first_part,check_digit,second_part
 }
